



package frc.robot.subsystems.poseEstimator.vision;

// Removed java.util.ArrayList as it's no longer directly used for the field
import org.littletonrobotics.junction.AutoLog;

import edu.wpi.first.math.Matrix;
import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.geometry.Pose3d;
import edu.wpi.first.math.numbers.N1;
import edu.wpi.first.math.numbers.N3;

public interface CameraIO {
    @AutoLog
    public static class CameraIOInputs {
        public boolean connected;
        public Pose2d pose;
        // By making PoseDataEntry a record, AdvantageKit's @AutoLog should
        // now be able to handle arrays of this type more effectively.
        public PoseDataEntry[] visionPoseData;
    }

    public default void updateInputs(CameraIOInputs inputs) {}

    // Corrected: PoseDataEntry is now a public static record
    // Records automatically generate constructor, getters, equals, hashCode, and toString.
    public static record PoseDataEntry(Pose3d robotPose, double timestamp, Matrix<N3, N1> standardDeviation) {
        // No explicit constructor needed here, it's generated by the record.
        // You can add compact constructor logic here if needed, but for simple
        // field assignments, it's automatic.
        public Pose3d getRobotPose() {
            return robotPose;
        }
        
        public double getTimestamp() {
            return timestamp;
        }
        
        public Matrix<N3, N1> getStandardDeviation() {
            return standardDeviation;
        }

        // You can still override toString() if you want custom formatting,
        // but the default record toString() is usually sufficient for logging.
        @Override
        public String toString() {
            return "[" + robotPose + ", timestamp=" + timestamp + ", stddev=" + standardDeviation + "]";
        }
    }
}
